buildscript {
    repositories {
        mavenCentral()
        maven { url = 'https://maven.maxhenkel.de/repository/public' }
        mavenLocal()
    }
    dependencies {
        classpath group: 'de.maxhenkel.forge-update', name: 'forge-update', version: '1.0.4'
    }
}

plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "com.modrinth.minotaur" version "1.2.1"
    id 'com.github.johnrengelman.shadow' version '7.1.0'
}

apply plugin: 'forge-update'

sourceCompatibility = JavaLanguageVersion.of(java_version as int)
targetCompatibility = JavaLanguageVersion.of(java_version as int)

archivesBaseName = archives_base_name
version = mod_version
group = maven_group

repositories {
    mavenCentral()
    maven { url = 'https://maven.fabricmc.net/' }
    maven { url = 'https://maven.terraformersmc.com/' }
    maven { url "https://maven.shedaniel.me/" }
    maven {
        name = 'henkelmax.public'
        url = 'https://maven.maxhenkel.de/repository/public'
    }
    mavenLocal()
}

runClient.doFirst {
    args = ['--username', "henkelmax${new Random().nextInt(1000)}"]
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings minecraft.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"

    Set<String> apiModules = [
            "fabric-api-base",
            "fabric-command-api-v1",
            "fabric-lifecycle-events-v1",
            "fabric-networking-api-v1",
            "fabric-resource-loader-v0",
            "fabric-key-binding-api-v1"
    ]

    apiModules.forEach {
        include(modImplementation(fabricApi.module(it, fabric_version)))
    }

    implementation project(':common')

    modImplementation "com.terraformersmc:modmenu:${modmenu_version}"

    modCompileOnly("de.maxhenkel.soundphysics:soundphysics-fabric:${sound_physics_remastered_version}") {
        transitive false
    }

    modApi("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}") {
        exclude(group: 'net.fabricmc.fabric-api')
    }

    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    implementation "de.maxhenkel.configbuilder:configbuilder:${configbuilder_version}"
    shadow "de.maxhenkel.configbuilder:configbuilder:${configbuilder_version}"

    implementation "de.maxhenkel.opus4j:opus4j:${opus4j_version}"
    shadow "de.maxhenkel.opus4j:opus4j:${opus4j_version}"

    implementation "de.maxhenkel.rnnoise4j:rnnoise4j:${rnnoise4j_version}"
    shadow "de.maxhenkel.rnnoise4j:rnnoise4j:${rnnoise4j_version}"

    implementation project(path: ':macos', configuration: 'shadow')
    shadow project(path: ':macos', configuration: 'shadow')

    implementation project(':api')
    shadow project(':api')
}

processResources {
    filesMatching("fabric.mod.json") {
        expand 'mod_id': mod_id,
                'mod_name': mod_name,
                'mod_vendor': mod_vendor,
                'mod_version': mod_version,
                'java_version': java_version,
                'minecraft_dependency': minecraft_dependency,
                'fabric_loader_version': fabric_loader_version,
                'compatibility_version': mod_compatibility_version,
                'modmenu_version': modmenu_version,
                'cloth_config_version': cloth_config_version,
                'sound_physics_remastered_version': sound_physics_remastered_version,
                'soundphysics_version': soundphysics_version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = java_version as int
}

tasks.withType(JavaCompile) {
    source(project(':common').sourceSets.main.allSource)
}

processResources {
    from("${project(':common').projectDir}/src/main/resources")
}

java {
    withSourcesJar()
}

jar {
    from('LICENSE') {
        rename { "${it}_${archivesBaseName}" }
    }

    copy {
        from("${project(':macos').buildDir}/libs/macos.jar") {
            rename { "macos.zip" }
        }
        into { "${buildDir}/resources/main" }
    }
}

curseforge {
    apiKey = file("${rootDir}/curseforge_api_key.txt").exists() ? file("${rootDir}/curseforge_api_key.txt").text : ''
    project {
        id = curse_id
        changelogType = 'markdown'
        changelog = file("changelog.md")
        releaseType = release_type
        addGameVersion curseforge_minecraft_version
        addGameVersion 'Fabric'
        addGameVersion "Java ${java_version}"
        mainArtifact(file("${buildDir}/libs/${archivesBaseName}-${version}.jar")) {
            displayName = "[FABRIC][${minecraft_version}] ${mod_name} ${mod_version}"
            relations {
                optionalDependency 'modmenu'
                optionalDependency 'sound-physics-fabric'
                optionalDependency 'sound-physics-remastered'
                optionalDependency 'cloth-config'
            }
        }
        afterEvaluate {
            uploadTask.dependsOn(remapJar)
        }
    }
    options {
        forgeGradleIntegration = false
    }
}

import com.modrinth.minotaur.TaskModrinthUpload

task publishModrinth(type: TaskModrinthUpload) {
    group = 'upload'
    token = file("${rootDir}/modrinth_token.txt").exists() ? file("${rootDir}/modrinth_token.txt").text : ''
    projectId = modrinth_id
    versionNumber = "fabric-${mod_version}"
    versionName = "[FABRIC][${minecraft_version}] ${mod_name} ${mod_version}"
    uploadFile = file("${buildDir}/libs/${archivesBaseName}-${version}.jar")
    versionType = release_type.toUpperCase()
    changelog = file("changelog.md").text
    addGameVersion(minecraft_version)
    addLoader('fabric')
//    addDependency('mOgUt4GM', 'optional') // ModMenu
//    addDependency('Af0DueBa', 'optional') // SoundPhysics
}

tasks.publishModrinth.dependsOn(build)

forgeUpdate {
    def messages = []
    file("changelog.md").eachLine { String line ->
        if (line.trim().startsWith('-')) {
            messages.add(line.replaceFirst('-', '').trim())
        }
    }

    serverURL = 'https://update.maxhenkel.de/'
    apiKey = file("${rootDir}/forge_update_api_key.txt").exists() ? file("${rootDir}/forge_update_api_key.txt").text : ''
    modID = mod_id
    gameVersion = minecraft_version
    modLoader = 'fabric'
    modVersion = mod_version
    updateMessages = messages
    releaseType = release_type
    tags = recommended == 'true' ? ['recommended'] : []
}

shadowJar {
    configurations = [project.configurations.shadow]
    classifier 'shadow-dev'
    relocate 'de.maxhenkel.configbuilder', "de.maxhenkel.${mod_id}.configbuilder"
    relocate 'de.maxhenkel.opus4j', "de.maxhenkel.${mod_id}.opus4j"
    relocate 'de.maxhenkel.rnnoise4j', "de.maxhenkel.${mod_id}.rnnoise4j"
    relocate 'com.dd.plist', "de.maxhenkel.${mod_id}.com.dd.plist"
    dependencies {
        exclude(dependency('net.java.dev.jna:jna'))
        exclude(dependency('net.java.dev.jna:jna-platform'))
        exclude(dependency('com.google.code.findbugs:jsr305'))
    }
}

remapJar {
    dependsOn shadowJar
    input.set shadowJar.archiveFile.get()
}